set nocompatible

let mapleader = "\<Space>"

call plug#begin('~/.vim/plugged')

     Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
         let g:nerdtree_tabs_autofind=1
         let g:nerdtree_tabs_open_on_console_startup=1
     Plug 'jeetsukumaran/vim-indentwise'
     Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
     Plug 'sirver/ultisnips'
         "au Bufenter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
         "let g:UltiSnipsJumpForwardTrigger="<tab>"
         let g:UltiSnipsExpandTrigger="<c-j>"
         let g:UltiSnipsEditSplit="vertical"
         "let g:UltiSnipsListSnippets="<c-e>"
         " this mapping Enter key to <C-y> to chose the current highlight item
         " and close the selection list, same as other IDEs.
         " CONFLICT with some plugins like tpope/Endwise
         inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
     Plug 'honza/vim-snippets'
     Plug 'bling/vim-airline'
        let g:powerline_symbols = 'fancy'
        let g:airline_powerline_fonts = 1
        " let g:airline_left_sep = ' '
        let g:airline_section_y = '%{getcwd()}'
        let g:airline_right_sep = ' '
        let g:airline_theme='base16'
        " let g:airline#extensions#tabline#enabled = 1
        " let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number
        " let g:airline#extensions#tabline#left_sep = ' '
        let g:airline_mode_map = {
            \ '__' : '-',
            \ 'n'  : 'N',
            \ 'i'  : 'I',
            \ 'R'  : 'R',
            \ 'c'  : 'C',
            \ 'v'  : 'V',
            \ 'V'  : 'V',
            \ '' : 'V',
            \ 's'  : 'S',
            \ 'S'  : 'S',
            \ '' : 'S',
            \ }
     Plug 'godlygeek/csapprox'
     "     let g:csapprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
     Plug 'jiangmiao/auto-pairs'
     Plug 'tpope/vim-commentary'
     Plug 'Shougo/neocomplete.vim'
         let g:neocomplete#enable_at_startup = 1
         let g:neocomplete#enable_smart_case = 1
         let g:neocomplete#sources#syntax#min_keyword_length = 3
         " let g:neocomplete#sources#dictionary#dictionaries=True
         inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
         function! s:my_cr_function()
           " return neocomplete#close_popup() . "\<CR>"
           " For no inserting <CR> key.
           return pumvisible() ? neocomplete#close_popup() : "\<CR>"
         endfunction
         " <TAB>: completion.
         inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
         " <C-h>, <BS>: close popup and delete backword char.
         inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
         inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
         inoremap <expr><C-y>  neocomplete#close_popup()
         inoremap <expr><C-e>  neocomplete#cancel_popup()
         " Close popup by <Space>.
         "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
     Plug 'tpope/vim-surround'
     Plug 'mhinz/vim-startify'
         autocmd User Startified setlocal buftype=
     Plug 'flazz/vim-colorschemes'
     Plug 'tpope/vim-repeat'
     Plug 'scrooloose/syntastic'
         let g:syntastic_cpp_compiler = 'clang++'
         let g:syntastic_cpp_compiler_options = ' -std=c++11'
     Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
         autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
         let g:ycm_semantic_triggers = {'haskell' : ['.']}
         let g:necoghc_enable_detailed_browse = 1
     Plug 'yggdroot/indentline'
         let g:indentline_color_term = 239
         let g:indentLine_char =  '▸'
         let g:html_indent_inctags = "html,body,head,tbody"
     Plug 'Superior-Haskell-Interaction-Mode-SHIM',{ 'for': 'haskell' }
     Plug 'lukerandall/haskellmode-vim',{ 'for': 'haskell' }
     Plug 'spolu/dwm.vim'
     Plug 'ctrlpvim/ctrlp.vim'
         let g:ctrlp_cmd = 'CtrlPBuffer'
         " let g:ctrlp_match_window = 'top,order:ttb,min:1,max:10,results:10'
         let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:30,results:15'
         let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
           \ --ignore .git
           \ --ignore .svn
           \ --ignore .hg
           \ --ignore .DS_Store
           \ --ignore "**/*.pyc"
           \ -g ""'
         nnoremap <Leader>o :CtrlP<CR>
         nnoremap <Leader>e :CtrlPMRUFiles<CR>
     Plug 'tacahiroy/ctrlp-funky'
         nnoremap <Leader>y :CtrlPFunky<CR>
         let g:ctrlp_funky_syntax_highlight = 1
     Plug 'Shougo/vimproc.vim'
     Plug 'osyo-manga/vim-marching',{ 'for': 'cpp' }
         let g:marching_clang_command = "clang++"
         let g:marching#clang_command#options = {
         \   "cpp" : "-std=c++14"
         \}
         let g:marching_enable_neocomplete = 1
         if !exists('g:neocomplete#force_omni_input_patterns')
           let g:neocomplete#force_omni_input_patterns = {}
         endif
         let g:neocomplete#force_omni_input_patterns.cpp =
             \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
         imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)


     " Plug 'ryanoasis/vim-webdevicons'
     "     let g:WebDevIconsUnicodeDecorateFolderNodes = 1
     "     let WebDevIconsUnicodeDecorateFolderNodesExactMatches = 1
     "     " let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
     "     let g:webdevicons_enable_airline_statusline_fileformat_symbols = 0
     "     let g:airline_section_y = '%{getcwd()}'
     "     let g:WebDevIconsUnicodeGlyphDoubleWidth = 0
     "     let g:NERDTreeDirArrows = 0
     "     let g:webdevicons_conceal_nerdtree_brackets = 1
     " Plug 'terryma/vim-expand-region'
     " Plug 'terryma/vim-multiple-cursors'
     "     let g:multi_cursor_use_default_mapping=0
     "     let g:multi_cursor_next_key='<C-a>'
     "     let g:multi_cursor_prev_key='<C-s>'
     "     let g:multi_cursor_skip_key='<C-d>'
     "     let g:multi_cursor_quit_key='<Esc>'
    " Plug 'Shougo/unite.vim'
    "     let g:unite_source_grep_command = 'ag'
    "     let g:unite_source_grep_default_opts = '--nocolor --nogroup --column'
    "     let g:unite_source_grep_recursive_opt = ''
    "     nnoremap <leader>f :Unite -buffer-name=files  -no-split -start-insert file_rec/async<cr>
    "     "Open dialog for file opening
    "     nnoremap , :Unite -start-insert buffer<CR>
    " Plug 'derekwyatt/vim-scala'
    "     let g:scala_use_default_keymappings = 0
    " Plug 'easymotion/vim-easymotion'
    " Plug 'junegunn/vim-easy-align'
    "     vmap <Enter> <Plug>(EasyAlign)
    "     nmap ga <Plug>(EasyAlign)
    " Plug 'Valloric/YouCompleteMe'
        autocmd CompleteDone * pclose
    "     let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<Enter>']
    "     let g:ycm_confirm_extra_conf = 0
    "     let g:ycm_global_ycm_extra_conf = '/home/arindam/.ycm_confirm_extra_conf'
      "let g:ycm_key_invoke_completion = '<C-,>'
" Plug 'benekastah/neomake'
    "     autocmd! BufWritePost * Neomake!
    " Plug 'mhinz/vim-grepper'
    " nnoremap <leader>f  :Grepper! -tool ag  -open -switch
    " Plug 'klen/python-mode'
    " Plug 'nathanaelkane/vim-indent-guides'
    "Plug 'scrooloose/nerdcommenter'
call plug#end()

filetype plugin indent on
syntax on


set number
colorscheme PaperColor
" set background=light
" colorscheme PaperColor
" set background=dark
set t_Co=256
set numberwidth=5

set smartindent
set autoindent
set copyindent

set encoding=utf-8

set tabstop=4
set shiftwidth=4

set updatetime=200
set expandtab
set textwidth=80
set guiheadroom=0
set laststatus=2
set so=7
set mouse=a
set wildmenu
set wildignore=*.o,*~,*.pyc
set ruler
set cmdheight=1
set hid
set ignorecase
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set smartcase
set incsearch
set hlsearch
set title
set showmatch
set smarttab
set foldmethod=indent
set foldnestmax=2
set foldlevelstart=1
"set foldclose=all
"set foldmethod=marker
"set foldmarker={,}
"set gdefault
set showcmd
" set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
set listchars=tab:▸\ ,eol:¬,trail:·,extends:»,precedes:«,nbsp:×
set wrap "Wrap lines"
set guifont=Monaco\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Regular\ 10
set dictionary+=~/.vim/spell/en.utf-8.spl
"set go-=aegiLt
set go-=a
set go-=e
set go-=g
set go-=i
set go-=m
set go-=r
set go-=L
set go-=T
set go-=t
set fo-=t
set history=5000
set cursorline
set autochdir
set autoread
set mousehide
set ttyfast
set magic
"set scrolljump=4
"set omnifunc
set backup
set backupdir=~/.vim/backups
set dir=~/.vim/backups

"
" NETRW SETTINGS
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
let g:netrw_winsize   = 30

"Eclim
"let g:EclimCompletionMethod = "omnifunc"


"""""KEYBINDINGS""""""
"Map Leader"
let mapleader = "\<Space>"

"Terminal Mappings
" if exists(':tnoremap')
"     tnoremap <Esc> <C-\><C-n>
"     let g:terminal_scrollback_buffer_size=10000
"     tnoremap <A-h> <C-\><C-n><C-w>h
"     tnoremap <A-j> <C-\><C-n><C-w>j
"     tnoremap <A-k> <C-\><C-n><C-w>k
"     tnoremap <A-l> <C-\><C-n><C-w>l
"     nnoremap <leader>g :vsplit<CR>:terminal<CR>
"     nnoremap <A-h> <C-w>h
"     nnoremap <A-j> <C-w>j
"     nnoremap <A-k> <C-w>k
"     nnoremap <A-l> <C-w>l
" endif

"Write File
nnoremap <Leader>w :update<CR>
nnoremap , :buffers<CR>

"Toggle Each Line Comment"
nnoremap <Leader>b :Commentary<CR>
vnoremap <Leader>b :Commentary<CR>

"Next two for wrap lines movement"
nnoremap j gj
nnoremap k gk

"Work with tabs - new tab, close tab, load new file in current buffer(do i need it ?)
nnoremap <Leader>tn :tabnew<CR>:Startify<CR>
"nnoremap <Leader>tc :tabclose<CR>
"nnoremap <Leader>te :tabedit
nnoremap <Leader>m  :tabnext<CR>
nnoremap <Leader>k  :tabprevious<CR>
nnoremap <Leader>s :Startify<CR>
nnoremap <Leader>tc :bd<CR>
"nnoremap <C-TAB> <C-6>
"nnoremap <Leader>te :tabedit
"nnoremap <Leader>m  :bn<CR>
"nnoremap <Leader>k  :bp<CR>

"File Explorer"
nnoremap <Leader>n :NERDTreeToggle<CR>

"Reindent
vnoremap < <gv
vnoremap > >gv

"Edit & Load VIMRC file
nnoremap <Leader>ev :e $MYVIMRC<CR>
nnoremap <Leader>sv :so $MYVIMRC<CR>

"Jump to matching bracket in normal & visual mode
nmap 55 %
vmap 55 %

"Go to beginning & end of line
nmap H ^
nmap L $

"Split Window"
"nnoremap <Leader>vs :rightbelow vsplit<CR>

"Search & Replace"
nnoremap <Leader>h :%smagic!!!g

"Strip trailing spaces
nnoremap <Leader>ts :%s!\s\+$!<CR>

"Work with System Registers( CLIPBOARD ) - copy paste cut
set clipboard=unnamedplus

"Jump to Ex Mode directly & its compensation
nnoremap ; :
nnoremap : ;

"Clear Highlighted Searches"
nnoremap <backspace> :noh<CR><CR>

"Edit a word quickly
nnoremap 22 ciw

"Go to Normal Mode"
imap jk <ESC>
imap jj <ESC>o

"Automatically jump to end of text you pasted
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]


"TODO FILE
nnoremap <Leader>td :e /home/arindam/todo.md<CR>

"Change colorscheme on the fly"
nnoremap <Leader>c1 :colorscheme PaperColor<CR>:AirlineTheme base16<CR>:set background=light<CR>
nnoremap <Leader>c2 :colorscheme wombat256<CR>:AirlineTheme wombat<CR>
nnoremap <Leader>c3 :colorscheme PaperColor<CR>:AirlineTheme base16<CR>:set background=dark<CR>
nnoremap <Leader>c4 :colorscheme gruvbox<CR>:set background=dark<CR>
nnoremap <Leader>c5 :colorscheme solarized<CR>:AirlineTheme base16<CR>
nnoremap <Leader>f1 :set guifont=Inconsolata\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12<CR>
nnoremap <Leader>f2 :set guifont=PT\ Mono\ 11<CR>
nnoremap <Leader>f3 :set guifont=Monaco\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Regular\ 10<CR>
nnoremap <Leader>f4 :set guifont=Consolas\ 12<CR>


"Quick write session with F2 And load session with F3
nnoremap <F2> :mksession! ~/vim_session <CR>
nnoremap <F3> :source ~/vim_session <CR>
nnoremap <F5> :redraw!<CR>

au BufNewFile *.cpp 0r ~/.vim/templates/template.cpp
" let g:ghc="/usr/bin/ghc-7.10.1"
let g:haddock_browser="/usr/bin/firefox"
au BufEnter *.hs compiler ghc
nnoremap <Leader>c :call GHC_ShowType(1)<CR>

let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

"function! g:UltiSnips_Complete()
"    call UltiSnips#ExpandSnippet()
"    if g:ulti_expand_res == 0
"        if pumvisible()
"            return "\<C-n>"
"        else
"            call UltiSnips#JumpForwards()
"            if g:ulti_jump_forwards_res == 0
"               return "\<TAB>"
"            endif
"        endif
"    endif
"    return ""
"endfunction
"
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
    exe 'NeoCompleteLock'
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
    exe 'NeoCompleteUnlock'
endfunction

" au VimEnter * exe ":source $MYVIMRC"
